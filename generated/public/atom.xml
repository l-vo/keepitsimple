<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep it simple. Stupid.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://keepitsimple.l-vo.fr/"/>
  <updated>2018-11-04T14:47:47.000Z</updated>
  <id>http://keepitsimple.l-vo.fr/</id>
  
  <author>
    <name>Laurent VOULLEMIER</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Partager des volumes Docker via AFP sur OS X</title>
    <link href="http://keepitsimple.l-vo.fr/2018/08/16/Partager-des-volumes-Docker-via-AFP-sur-OS-X/"/>
    <id>http://keepitsimple.l-vo.fr/2018/08/16/Partager-des-volumes-Docker-via-AFP-sur-OS-X/</id>
    <published>2018-08-16T17:38:08.000Z</published>
    <updated>2018-11-04T14:47:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Suite à la lecture de <a href="https://jolicode.com/blog/ma-stack-de-developpement-avec-docker-sous-macos-x" target="_blank" rel="noopener">cet article</a>, je voudrais faire un court retour d’expérience sur une solution alternative<br> que je privilégie depuis un certain temps. </p><h2 id="La-problematique"><a href="#La-problematique" class="headerlink" title="La problématique"></a>La problématique</h2><p>Si depuis que j’ai goûté à Docker, je ne peux m’en passer pour mes conteneurs de développement, j’ai vite été confronté à des limitations sur OS X:</p><ul><li>Les performances médiocres lorsque je partage un dossier entre ma machine hôte et mon conteneur (les projects Symfony sont très lents même sans activer XDebug).</li><li>Les fonctionnalités limités du volume partagé. Il ne permet par exemple pas d’utiliser les ACL comme préconisé par Symfony pour jongler entre les actions du server web (user www-data) et celles de la console (user courant).  <a id="more"></a></li></ul><h2 id="Configurations-de-volume-cached-et-delegated"><a href="#Configurations-de-volume-cached-et-delegated" class="headerlink" title="Configurations de volume cached et delegated"></a>Configurations de volume cached et delegated</h2><p>Conscient que cette solution ne réglerait de toute façon pas mon deuxième problème (la gestion des ACL), j’ai quand même voulu tester les performances des configurations de volume <code>cached</code> et <code>delegated</code> (plus d’infos sur ces configurations <a href="https://docs.docker.com/docker-for-mac/osxfs-caching/#tuning-with-consistent-cached-and-delegated-configurations" target="_blank" rel="noopener">ici</a>). Pour du développement, j’ai besoin que les modifications sur les fichiers faites depuis ma machine hôte soient immédiatement repércutées dans mon conteneur. Je choisis donc la configuration <code>delegated</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml d'un conteneur Symfony</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="attr">    symfony:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/Users/laurent/dev/my-symfony-project:/var/www/html:delegated</span></span><br></pre></td></tr></table></figure><p>Alors oui, les performances dans mon cas d’utilisation sont meilleures qu’avec la configuration par defaut (<code>consistent</code>, c’est à dire synchronisation immédiate dans les deux sens). Mais dans une situation de développement, les pages sont encore beaucoup trop longues à charger et l’utilisation de XDebug reste compliquée.</p><h2 id="Volumes-partages-avec-le-systeme-hote-via-AFP"><a href="#Volumes-partages-avec-le-systeme-hote-via-AFP" class="headerlink" title="Volumes partagés avec le système hôte via AFP"></a>Volumes partagés avec le système hôte via AFP</h2><h3 id="Principe"><a href="#Principe" class="headerlink" title="Principe"></a>Principe</h3><p>Plutôt que de partager le volume avec la machine hôte, ce qui diminue les performances et limite les fonctionalités du système de fichier, on va essayer de rester plus proche de la philosophie de Docker: les volumes sont partagés entre différents conteneurs et c’est un conteneur qui nous permet d’accéder à notre système de fichier. A savoir un conteneur Netatalk (protocole AFP). Alors bien sûr il y a des inconvénients, et pas des moindres qui vont en rebuter plus d’un:</p><ul><li>Vous ne pouvez accéder à la source de vos projets si votre conteneur AFP n’est pas démarré</li><li>Votre IDE va accéder à vos fichiers via un partage réseau et peut avoir des difficultés à les analyser</li></ul><p>Je privilégie cependant cette solution, car j’ai enfin des temps de chargement acceptables sur mon projet et une gestion de droits (ACL) fonctionnelle. J’utilise l’IDE PHPStorm d’Intellij qui n’est pas un éditeur des plus légers et une fois la première indexation faite, ça fonctionne plutôt bien. Si vous choisissez d’utiliser un partage via AFP sur plusieurs projets, il faut que vous ayez un seul conteneur AFP qui va servir les fichiers de tous vos projets. C’est ce que nous allons faire dans la prochaine section.</p><h3 id="Mise-en-place"><a href="#Mise-en-place" class="headerlink" title="Mise en place"></a>Mise en place</h3><h4 id="Creation-d’un-volume-externe"><a href="#Creation-d’un-volume-externe" class="headerlink" title="Creation d’un volume externe"></a>Creation d’un volume externe</h4><p>Ce volume va contenir le code source du projet sur lequel vous développez.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create myproject_files</span><br></pre></td></tr></table></figure></p><h4 id="Conteneur-du-projet"><a href="#Conteneur-du-projet" class="headerlink" title="Conteneur du projet"></a>Conteneur du projet</h4><p>(Symfony dans notre exemple)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml d'un conteneur Symfony</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">  services:</span></span><br><span class="line"><span class="attr">    symfony:</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - myproject_files:</span><span class="string">/var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  myproject_files:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Conteneur-Netatalk"><a href="#Conteneur-Netatalk" class="headerlink" title="Conteneur Netatalk"></a>Conteneur Netatalk</h4><p>C’est le conteneur respectant le protocole AFP qui va servier les fichiers de notre (nos) projet(s).</p><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile:"></a>Dockerfile:</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netatalk/Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> cptactionhank/netatalk</span><br><span class="line"></span><br><span class="line"><span class="comment"># On va ici aussi utiliser les ACL afin de ne pas avoir de problème de droits sur</span></span><br><span class="line"><span class="comment"># nos fichiers qui peuvent provenir de plusieurs conteneurs avec des users différents</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install acl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> afp.conf /etc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> run.sh /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod u+x /run.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/run.sh"</span>]</span></span><br></pre></td></tr></table></figure><h5 id="Fichier-de-configuration-Netatalk"><a href="#Fichier-de-configuration-Netatalk" class="headerlink" title="Fichier de configuration Netatalk:"></a>Fichier de configuration Netatalk:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">;netatalk/afp.conf</span><br><span class="line">[Global]</span><br><span class="line">; output log entries to stdout instead of syslog</span><br><span class="line">; it is the docker way where the engine in turn</span><br><span class="line">; can direct the log output to a storage backend</span><br><span class="line">log file = /dev/stdout</span><br><span class="line"></span><br><span class="line">; enable guest access as well as user accounts</span><br><span class="line">uam list = uams_guest.so uams_dhx2.so uams_dhx.so</span><br><span class="line"></span><br><span class="line">[Share]</span><br><span class="line">path = /media/share</span><br><span class="line">; when the environment variable `AFP_USER` is not</span><br><span class="line">; provided valid users list will be empty and</span><br><span class="line">; thus be available for both guests and</span><br><span class="line">; authenticated users</span><br><span class="line">valid users = user1</span><br></pre></td></tr></table></figure><p><code>user1</code> utilisé ci-dessus en tant qu’utilisateur valide doit correspondre à la variable d’environnement <code>AFP_USER</code> du fichier docker-compose.yml (voir plus loin).</p><h5 id="Fichier-lance-au-demarrage-du-conteneur"><a href="#Fichier-lance-au-demarrage-du-conteneur" class="headerlink" title="Fichier lancé au démarrage du conteneur:"></a>Fichier lancé au démarrage du conteneur:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netatalk/run.sh</span></span><br><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Grace à ces ACL, le user 1000 (user1) pourra accéder aux fichiers pouvant</span></span><br><span class="line"><span class="comment"># appartenir à des utilisateurs de différents projets avec des UID différents.</span></span><br><span class="line"><span class="comment"># La valeur 1000 doit être la même que celles des variables d'environnement</span></span><br><span class="line"><span class="comment"># AFP_UID et AFP_GID dans le fichier docker-compose.yml.</span></span><br><span class="line">setfacl -dR -m u:1000:rwX /media/share</span><br><span class="line">setfacl -R -m u:1000:rwX /media/share</span><br><span class="line"></span><br><span class="line">/docker-entrypoint.sh</span><br></pre></td></tr></table></figure><h5 id="Fichier-docker-compose"><a href="#Fichier-docker-compose" class="headerlink" title="Fichier docker-compose:"></a>Fichier docker-compose:</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  afp:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">netatalk</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line">      <span class="comment"># Le port 548 du conteneur n'est pas mappé au port 548 de la machine hôte.</span></span><br><span class="line">      <span class="comment"># Cela ne fonctionne plus depuis OS X Sierra.</span></span><br><span class="line">      <span class="comment"># veuillez donc choisir un autre port; 1548 par example.</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">1548</span><span class="string">:548</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - myproject_files:</span><span class="string">/media/share/myproject</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_USER=user1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_PASSWORD=user1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_UID=1000</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_GID=1000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  myproject_files:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Utilisation"><a href="#Utilisation" class="headerlink" title="Utilisation"></a>Utilisation</h3><p>Votre conteneur AFP peut recevoir des volumes de différents projets, je vous conseille de procéder ainsi, démarrer un conteneur AFP par projet sera vite fastidieux lorsque vous voudrez consulter des sources de différents projets.</p><p>Pour intégrer le volume partagé d’un projet supplémentaire, il suffit de le rajouter dans les sections volumes:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  afp:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">netatalk</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">1548</span><span class="string">:548</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - myproject_files:</span><span class="string">/media/share/myproject</span></span><br><span class="line"><span class="attr">      - myotherproject_files:</span><span class="string">/media/share/myotherproject</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_USER=user1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_PASSWORD=user1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_UID=1000</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AFP_GID=1000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  myproject_files:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  myotherproject_files:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Cette solution n’a pas pour prétention ni d’être meilleure que les autres, ni de résoudre tous les problèmes (d’ailleurs elle ne le fait pas !). Elle peut cependant être intéressante pour les personnes qui ne seraient pas tout à fait satisfaites des volumes partagés de façon traditionnelle entre machine hôte et conteneur et qui sont prêtes à faire d’autres compromis.</p><h2 id="Edit-04-11-2018"><a href="#Edit-04-11-2018" class="headerlink" title="Edit 04/11/2018"></a>Edit 04/11/2018</h2><p>J’ai depuis testé <a href="http://docker-sync.io/" target="_blank" rel="noopener">docker-sync</a>. Le principe reste le même, les fichiers demeurent sur un volume externe et un autre conteneur se charge de les “servir”. Là où via AFP, le volume était accessible via un partage réseau, docker-sync crée un conteneur qui se charge de surveiller et de garder synchronisés un dossier local et le volume externe utilisé par l’application.</p><p>J’ai d’abord utilisé la paramétrage <code>host_disk_mount_mode</code> par defaut (<code>cached</code>) puis j’ai utilisé la valeur <code>delegated</code> qui apporte une synchronisation de ma machine hôte vers mon conteneur plus rapide. Malgré ça ce n’est aujourd’hui pas tout à fait parfait, j’ai encore quelques cas ou les modifs que je fais depuis mon IDE ne sont pas repercutés dans mon conteneur (la plupart du temps lors d’un changement de branche). Le seul workaround que j’ai trouvé jusqu’à présent est de redémarrer docker-sync puis le conteneur de mon application. ça reste malgré tout la solution que je privilégie et conseille aujourd’hui.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Suite à la lecture de &lt;a href=&quot;https://jolicode.com/blog/ma-stack-de-developpement-avec-docker-sous-macos-x&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cet article&lt;/a&gt;, je voudrais faire un court retour d’expérience sur une solution alternative&lt;br&gt; que je privilégie depuis un certain temps. &lt;/p&gt;
&lt;h2 id=&quot;La-problematique&quot;&gt;&lt;a href=&quot;#La-problematique&quot; class=&quot;headerlink&quot; title=&quot;La problématique&quot;&gt;&lt;/a&gt;La problématique&lt;/h2&gt;&lt;p&gt;Si depuis que j’ai goûté à Docker, je ne peux m’en passer pour mes conteneurs de développement, j’ai vite été confronté à des limitations sur OS X:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Les performances médiocres lorsque je partage un dossier entre ma machine hôte et mon conteneur (les projects Symfony sont très lents même sans activer XDebug).&lt;/li&gt;
&lt;li&gt;Les fonctionnalités limités du volume partagé. Il ne permet par exemple pas d’utiliser les ACL comme préconisé par Symfony pour jongler entre les actions du server web (user www-data) et celles de la console (user courant).
    
    </summary>
    
    
      <category term="Docker" scheme="http://keepitsimple.l-vo.fr/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Sécuriser ses conteneurs Docker en production</title>
    <link href="http://keepitsimple.l-vo.fr/2018/07/19/Securiser-ses-conteneurs-Docker-en-production/"/>
    <id>http://keepitsimple.l-vo.fr/2018/07/19/Securiser-ses-conteneurs-Docker-en-production/</id>
    <published>2018-07-19T09:18:20.000Z</published>
    <updated>2018-09-30T11:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker est à l’origine conçu pour créer des conteneurs à la volée et effectuer des developpements/tests dans différents environments. Mais sa simplicité d’utilisation et son écosystème grandissant pousse de plus en plus ses adeptes à vouloir l’utiliser en prod. D’autant que de nouveaux outils (Kubernetes, Swarm…) et des améliorations récentes (user namespaces, variables d’environnement dans les docker-compose…) vont dans ce sens.  </p><p>Malheureusement les conteneurs Docker sont de base assez peu sécurisés. Nous allons<br>voir quelques astuces simples pour limiter les possibilités d’attaques lorsque vous déploierez vos conteneurs en production. </p><a id="more"></a><p>Tout d’abord je vous recommande la lecture de cette article: <a href="https://w3blog.fr/2016/02/23/docker-securite-10-bonnes-pratiques/" target="_blank" rel="noopener">https://w3blog.fr/2016/02/23/docker-securite-10-bonnes-pratiques/</a>. Bien que datant un peu, les préceptes qu’il aborde sont encore d’actualité. Je vais essayer de le compléter par quelques autres conseils pour sécuriser votre conteneur.</p><h2 id="Supprimer-la-creation-automatique-de-regles-iptables"><a href="#Supprimer-la-creation-automatique-de-regles-iptables" class="headerlink" title="Supprimer la création automatique de règles iptables"></a>Supprimer la création automatique de règles iptables</h2><p>Par défaut, le daemon Docker créé les règles iptables dont il a besoin. Mais si vous êtes sur un système hôte avec plusieurs conteneurs et que vous le sécurisez via iptables et fail2ban (ou équivalent), vous allez vouloir garder le contrôle sur les règles qui vont être créées dans votre iptables. Celà se fait en modifiant les options du service Docker:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=&quot;--iptables=false&quot;</span><br></pre></td></tr></table></figure></p><p>Attention, lorsque vous modifiez les options du daemon, vous aurez la mauvaise surprise de voir que tous vos conteneurs, volumes etc sont à recréer. Vous pouvez les retrouver en revenant aux anciennes options du daemon; mais à garder à l’esprit si vous aviez prévu de faire cette modif en prod sans interruption de service.</p><h2 id="Utiliser-les-user-namespaces"><a href="#Utiliser-les-user-namespaces" class="headerlink" title="Utiliser les user namespaces"></a>Utiliser les user namespaces</h2><p>Un des problèmes innérants à la sécurité de Docker est le fait que les conteneurs tournent par defaut sur l’utilisateur root. Ce qui signifie que l’utilisateur root dans vos conteneurs a potentiellement les privilèges de l’utilisateur root de votre machine hôte. Oui, ça fait peur. Mais ça c’étant avant la mise en place sur Docker des user namespaces. Les user namespaces vont permettre de mapper les utilisateurs de vos conteneurs à des utilisateurs avec des privilèges plus limités sur votre système hôte. Là encore, la modification s’effectue via les options du daemon Docker:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=&quot;--userns-remap=default&quot;</span><br></pre></td></tr></table></figure></p><p>Une plage d’identifiants va être affecté à l’user/group dockremap dans les fichiers <code>/etc/subuid</code> et <code>/etc/subgid</code> de votre machine hôte et correspondront aux utilisateurs à l’intérieur de vos conteneurs. Un nom d’utilisateur autre que <code>dockremap</code> peut être utilisé si vous le specifiez comme valeur de <code>--userns-remap</code>à la place de <code>default</code>.</p><h2 id="Directive-USER-dans-les-Dockerfile"><a href="#Directive-USER-dans-les-Dockerfile" class="headerlink" title="Directive USER dans les Dockerfile"></a>Directive USER dans les Dockerfile</h2><p>Vous avez maintenant quelques astuces pour protéger mieux vos conteneurs. Mais si vous publiez une image de conteneur “production ready”, la personne qui va la déployer aura-t-elle utilisé les user namespaces ? Une image Docker ayant pour but d’être déployé en production ne devrait jamais démarrer sous l’utilisateur root. Ceci est possible via la directive <code>USER</code> mais on trouve finalement sur le net assez peu d’exemples d’utilisation de cette directive dans le but de sécuriser un conteneur. Voyons voir si nous voulons par exemple créer une image d’un conteneur MySQL sécurisé:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:trusty</span><br><span class="line"></span><br><span class="line"><span class="comment"># Des instructions...</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># On cré un utilisateur aux droits limités</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> adduser --disabled-password --gecos <span class="string">""</span> user1</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># On utilise cet utilisateur</span></span><br><span class="line"><span class="keyword">USER</span> user1</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"mysqld_safe"</span>]</span></span><br></pre></td></tr></table></figure><p>Et là on se rend compte que user1 n’a pas les privilèges pour lancer mysqld_safe. Une astuce va donc être d’autoriser user1 à lancer mysqld_safe via le fichier <code>sudoers</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:trusty</span><br><span class="line"></span><br><span class="line"><span class="comment"># Des instructions...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># On cré un utilisateur aux droits limités</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> adduser --disabled-password --gecos <span class="string">""</span> user1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># On autorise user1 à lancer mysqld_safe</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"user1 ALL = (root) NOPASSWD: /usr/bin/mysqld_safe"</span> &gt;&gt; /etc/sudoers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># On utilise cet utilisateur</span></span><br><span class="line"><span class="keyword">USER</span> user1</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"sudo"</span>, <span class="string">"mysqld_safe"</span>]</span></span><br></pre></td></tr></table></figure><p>Le conteneur tourne à présent sous l’utilisateur user1 qui n’a de privilèges que pour lancer mysqld_safe. Si vous rentrez dans le conteneur via <code>docker exec</code>, vous êtes connecté via user1 ce qui limite grandement les possibilités d’une personne mal intentionnée.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Voilà, l’écosystème de Docker en continuelle évolution pousse de plus en plus vers une utilisation en production (et de nombreuses plus ou moins grosses sociétés ont déjà franchi le pas). Il ne faut cependant pas négliger la sécurité qui n’est pas moins importante ou plus facile à mettre en place que dans un système traditionnel sans conteneurs.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker est à l’origine conçu pour créer des conteneurs à la volée et effectuer des developpements/tests dans différents environments. Mais sa simplicité d’utilisation et son écosystème grandissant pousse de plus en plus ses adeptes à vouloir l’utiliser en prod. D’autant que de nouveaux outils (Kubernetes, Swarm…) et des améliorations récentes (user namespaces, variables d’environnement dans les docker-compose…) vont dans ce sens.  &lt;/p&gt;
&lt;p&gt;Malheureusement les conteneurs Docker sont de base assez peu sécurisés. Nous allons&lt;br&gt;voir quelques astuces simples pour limiter les possibilités d’attaques lorsque vous déploierez vos conteneurs en production. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://keepitsimple.l-vo.fr/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Installer une galerie photo (Piwigo) sur Raspberry PI</title>
    <link href="http://keepitsimple.l-vo.fr/2018/04/28/Installer-une-galerie-photo-Piwigo-sur-Raspberry-PI/"/>
    <id>http://keepitsimple.l-vo.fr/2018/04/28/Installer-une-galerie-photo-Piwigo-sur-Raspberry-PI/</id>
    <published>2018-04-28T10:24:36.000Z</published>
    <updated>2018-04-28T20:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quelle-gallerie-photo"><a href="#Quelle-gallerie-photo" class="headerlink" title="Quelle gallerie photo ?"></a>Quelle gallerie photo ?</h2><p>Je cherchais une galerie photo à mettre sur mon Raspberry Pi 3. J’avais précédemment utilisé la galerie propriétaire DSPhoto (Synology) et je cherchais quelque chose s’en rapprochant en terme de fonctionnalités. A savoir:</p><ul><li>Possibilité d’uploader les photos par lot</li><li>Existence d’une application ou au moins d’un site web adapté aux mobiles</li><li>Capacité à présenter les photos en miniatures mais aussi de les télécharger en qualité originale si besoin</li><li>Gestion d’albums privés et possibilité d’y accéder sans identification via un lien</li><li>Support de certains formats vidéos</li></ul><p>Après quelques recherches, j’ai fini par tomber sur Piwigo (<a href="http://fr.piwigo.org/)" target="_blank" rel="noopener">http://fr.piwigo.org/)</a>, une galerie open source avec un système de plugin permettant d’étendre les fonctionnalités de base à celles que je recherchais.<br><a id="more"></a></p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>J’ai installé OSMC (<a href="https://osmc.tv/" target="_blank" rel="noopener">https://osmc.tv/</a>) pour faire de mon Raspberry PI un lecteur multimedia. Cette distribution étant basée sur une Debian Stretch, je n’ai pas de mal à trouver dans les dépôts Debian ce dont j’ai besoin pour faire tourner Piwigo; à savoir:</p><ul><li>Nginx</li><li>Php-fpm</li><li>Mysql</li></ul><p>Une fois l’archive de Piwigo décompressée dans le répertoire web de Nginx, je suis les instructions de l’installateur et j’ai peu de temps après une galerie photo fonctionnelle.</p><h2 id="Fonctionnement"><a href="#Fonctionnement" class="headerlink" title="Fonctionnement"></a>Fonctionnement</h2><p>La galerie génère des miniatures des images, soit “en live” lorsque l’on consulte les albums, soit via le traitement par lot dans la partie administration. Une fois les miniatures générées, c’est assez plaisant, le site répond bien, c’est presque parfait. Presque.</p><h2 id="Les-problemes"><a href="#Les-problemes" class="headerlink" title="Les problèmes"></a>Les problèmes</h2><p>là où le bât blesse, c’est précisémment cette génération de miniatures. Quand on a des albums d’un certain nombre de photos (je ne parle pas d’albums de 1000 photos, on reste en dessous des 100 à raison de 5Mo environ par photo), la génération est très longue.   </p><p> Pire, comme toute les générations se lancent en parallèle (une génération par photo affichée, aussi bien à l’affichage de l’album qu’à l’affichage dans le traitement par lot), la charge en vient à planter l’application. A tel point que je suis obligé de redémarrer mon serveur web pour pouvoir à nouveau utiliser la galerie.</p><p>Une autre chose, lorsque je lance la synchronisation des photos que j’ai précédemment uploadé, s’il y a beaucoup de photos à synchroniser, mon Nginx timeout (même si au final la synchro est bien effectuée au bout d’un moment car le Php-fpm lui continue et termine son travail).</p><h2 id="Les-solutions"><a href="#Les-solutions" class="headerlink" title="Les solutions"></a>Les solutions</h2><h3 id="Augmentation-du-timeout-pour-la-synchronisation"><a href="#Augmentation-du-timeout-pour-la-synchronisation" class="headerlink" title="Augmentation du timeout pour la synchronisation"></a>Augmentation du timeout pour la synchronisation</h3><p>Ici, rien de très compliqué, la directive <code>fastcgi_read_timeout</code> règle mon problème, je choisi de la mettre ce timeout à 5 minutes:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_read_timeout 300;</span><br></pre></td></tr></table></figure></p><h3 id="Bloquage-de-la-generation-d’image-en-live"><a href="#Bloquage-de-la-generation-d’image-en-live" class="headerlink" title="Bloquage de la génération d’image en live"></a>Bloquage de la génération d’image en live</h3><p>En attendant qu’un script cgi soit mis au point pour générer les miniatures, n’ayant pas trop de temps à consacrer au problème, je choisi de mettre un “hack” dans ma configuration Nginx qui va me permettre de détourner les requêtes de génération qui se lancent en parallèle. Je met ma configuration dans un snippet:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># /etc/nginx/snippets/phpfpm.conf</span><br><span class="line"># Live image loading is too expensive, disable it           </span><br><span class="line">if ($arg_ajaxload != &quot;true&quot;) &#123;                              </span><br><span class="line">    set $redirect 1;                                        </span><br><span class="line">&#125;                                                           </span><br><span class="line">                                                                            </span><br><span class="line">if ($arg_b = &quot;&quot;) &#123;                                          </span><br><span class="line">    set $redirect 1;                                        </span><br><span class="line">&#125;                                                           </span><br><span class="line"></span><br><span class="line"># For videos, needed only if you use the VideoJS plugin         </span><br><span class="line">if ($args ~ &quot;pwg_representative&quot;) &#123;                         </span><br><span class="line">    set $redirect 0;                                          </span><br><span class="line">&#125;                                                           </span><br><span class="line">                                                                            </span><br><span class="line">if ($redirect = 1) &#123;                                        </span><br><span class="line">    rewrite ^/i.php$ /_data/i$args?;                          </span><br><span class="line">    rewrite ^(/_data/i/.*?)(&amp;.*)$ $1 last;                    </span><br><span class="line">&#125;          </span><br><span class="line">                                </span><br><span class="line"># Usual configuration for Nginx with Php-fpm                                </span><br><span class="line">fastcgi_pass unix:/var/run/php5-fpm.sock;        </span><br><span class="line">include fastcgi_params;                          </span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line"># For fixing synchronization timeout</span><br><span class="line">fastcgi_read_timeout 300;</span><br></pre></td></tr></table></figure></p><p>L’idée est que lorsque les requêtes ne sont pas les requêtes de générations explicites du traitement par lot (c’est à dire les requêtes émises par les images affichées dans les albums ou les images affichées dans le traitement par lot), on transforme l’url de génération en live par une url statique pour chercher la miniature comme si elle avait déjà été générée. On obtient donc une image vide tant que les miniatures ne sont pas générées mais au moins on ne plante pas le serveur.</p><p>Lorsque l’url contient un paramètre <code>b</code>, il s’agit forcément d’une génération implicite de miniature que l’on ne veut pas exécuter donc on applique la redirection. C’est aussi le cas si le paramètre <code>ajaxload</code> est présent et qu’il n’est pas égal à <code>true</code>. Pour les utilisateurs du plugin VideoJS, il ne faut pas appliquer la redirection pour les miniatures de vidéos, on reconnait ces urls par la présence du paramètre <code>pwg_representative</code>.</p><p>Ce snippet doit être inclus dans la configuration Nginx:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># /etc/nginx/sites-enabled/default</span><br><span class="line">server &#123;                                                                   </span><br><span class="line">    listen 80 default_server;</span><br><span class="line">   listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">    # Gallery root directory is on my external drive</span><br><span class="line">    root /media/dd/piwigo;                             </span><br><span class="line">                                            </span><br><span class="line">    # Default index file</span><br><span class="line">    index index.php;</span><br><span class="line">                                                                 </span><br><span class="line">    server_name _;                                               </span><br><span class="line">                                                                 </span><br><span class="line">    location / &#123;                                                 </span><br><span class="line">            # First attempt to serve request as file, then       </span><br><span class="line">            # as directory, then fall back to displaying a 404.</span><br><span class="line">            try_files $uri $uri/ =404;                         </span><br><span class="line">    &#125;                                                          </span><br><span class="line">                                                               </span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #                                                                   </span><br><span class="line">    location ~ \.php$ &#123;                                                 </span><br><span class="line">            include snippets/fastcgi-php.conf;                          </span><br><span class="line">            include snippets/phpfpm.conf;                               </span><br><span class="line">    &#125;                                                                   </span><br><span class="line">                                              </span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one                                 </span><br><span class="line">    #                                                          </span><br><span class="line">    location ~ /\.ht &#123;                                         </span><br><span class="line">            deny all;                                          </span><br><span class="line">    &#125;                                                          </span><br><span class="line">                              </span><br><span class="line">    # Hide Nginx version</span><br><span class="line">    server_tokens off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>J’en ai aussi profité pour ajouter une petite sécurité afin que les pages sensibles (administration, installation…) ne soient accessible qu’à partir du réseau local (en clair quand je suis relié à ma box ou connecté à mon WIFI):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Allow sensible pages access only from local network</span><br><span class="line">location ~ ^/(admin.php|upgrade.php|install.php)$ &#123;</span><br><span class="line">        allow 192.168.1.0/24;</span><br><span class="line">        deny all;                               </span><br><span class="line">        include snippets/fastcgi-php.conf;                     </span><br><span class="line">        include snippets/phpfpm.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Ce qui nous donne la configuration complète:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># /etc/nginx/sites-enabled/default</span><br><span class="line">server &#123;                                                                   </span><br><span class="line">    listen 80 default_server;</span><br><span class="line">   listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">    # Gallery root directory is on my external drive</span><br><span class="line">    root /media/dd/piwigo;                             </span><br><span class="line">                                            </span><br><span class="line">    # Default index file</span><br><span class="line">    index index.php;</span><br><span class="line">                                                                 </span><br><span class="line">    server_name _;                                               </span><br><span class="line">                                                                 </span><br><span class="line">    location / &#123;                                                 </span><br><span class="line">            # First attempt to serve request as file, then       </span><br><span class="line">            # as directory, then fall back to displaying a 404.</span><br><span class="line">            try_files $uri $uri/ =404;                         </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # Allow sensible pages access only from local network</span><br><span class="line">    location ~ ^/(admin.php|upgrade.php|install.php)$ &#123;</span><br><span class="line">            allow 192.168.1.0/24;</span><br><span class="line">            deny all;                               </span><br><span class="line">            include snippets/fastcgi-php.conf;                     </span><br><span class="line">            include snippets/phpfpm.conf;</span><br><span class="line">    &#125;                                                          </span><br><span class="line">                                                               </span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #                                                                   </span><br><span class="line">    location ~ \.php$ &#123;                                                 </span><br><span class="line">            include snippets/fastcgi-php.conf;                          </span><br><span class="line">            include snippets/phpfpm.conf;                               </span><br><span class="line">    &#125;                                                                   </span><br><span class="line">                                              </span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one                                 </span><br><span class="line">    #                                                          </span><br><span class="line">    location ~ /\.ht &#123;                                         </span><br><span class="line">            deny all;                                          </span><br><span class="line">    &#125;                                                          </span><br><span class="line">                              </span><br><span class="line">    # Hide Nginx version</span><br><span class="line">    server_tokens off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Avec cette configuration:</p><ul><li>je dépose mes photos dans le répertoire <code>galleries</code> de Piwigo (un <code>rsync</code> fait ça très bien)</li><li>je synchronise mes photos déposées (“synchronisation” dans la partie Administration)</li><li>j’utilise le traitement par lot pour générer mes miniatures</li></ul><p>Je dispose désormais d’une galerie pleine de fonctionnalités, skinnable et réactive simplement à partir d’un Raspberry Pi et qui n’est limitée en taille que par la capacité de mon disque dur.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quelle-gallerie-photo&quot;&gt;&lt;a href=&quot;#Quelle-gallerie-photo&quot; class=&quot;headerlink&quot; title=&quot;Quelle gallerie photo ?&quot;&gt;&lt;/a&gt;Quelle gallerie photo ?&lt;/h2&gt;&lt;p&gt;Je cherchais une galerie photo à mettre sur mon Raspberry Pi 3. J’avais précédemment utilisé la galerie propriétaire DSPhoto (Synology) et je cherchais quelque chose s’en rapprochant en terme de fonctionnalités. A savoir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possibilité d’uploader les photos par lot&lt;/li&gt;
&lt;li&gt;Existence d’une application ou au moins d’un site web adapté aux mobiles&lt;/li&gt;
&lt;li&gt;Capacité à présenter les photos en miniatures mais aussi de les télécharger en qualité originale si besoin&lt;/li&gt;
&lt;li&gt;Gestion d’albums privés et possibilité d’y accéder sans identification via un lien&lt;/li&gt;
&lt;li&gt;Support de certains formats vidéos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Après quelques recherches, j’ai fini par tomber sur Piwigo (&lt;a href=&quot;http://fr.piwigo.org/)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://fr.piwigo.org/)&lt;/a&gt;, une galerie open source avec un système de plugin permettant d’étendre les fonctionnalités de base à celles que je recherchais.&lt;br&gt;
    
    </summary>
    
    
      <category term="Raspberry_Pi" scheme="http://keepitsimple.l-vo.fr/tags/Raspberry-Pi/"/>
    
      <category term="Nginx" scheme="http://keepitsimple.l-vo.fr/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Debug facile avec XDEBUG</title>
    <link href="http://keepitsimple.l-vo.fr/2018/04/06/Debug-facile-avec-XDebug/"/>
    <id>http://keepitsimple.l-vo.fr/2018/04/06/Debug-facile-avec-XDebug/</id>
    <published>2018-04-06T18:48:05.000Z</published>
    <updated>2018-04-28T20:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Intéressons nous au debugging d’applications. Tout développeur en fait continuellement dans ses projects. Souvent de la façon la plus basique qui soit:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $myVar; <span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure></p><p>Mais lorsque l’on a besoin de suivre l’execution dans une pile de plusieurs fonctions et à l’intérieur de chacune d’elle visualiser plusieurs variables pour connaitre le contexte, la méthode ci-dessus ne suffit plus. C’est là qu’intervient XDEBUG.<br><a id="more"></a></p><h2 id="Quand-utiliser-XDEBUG"><a href="#Quand-utiliser-XDEBUG" class="headerlink" title="Quand utiliser XDEBUG ?"></a>Quand utiliser XDEBUG ?</h2><p>Parce qu’il ralentit considérablement l’application, XDEBUG ne doit pas être utilisé dans des environnements de production. En revanche son utilisation est conseillée en environnement de développement. Au delà du débuggage, XDEBUG peut aussi faire du profilage d’application (pour localiser les parties “gourmandes” de votre code), ou encore génerer la couverture de code de vos tests couplé à PHPUnit. Nous nous intéresserons dans cet article uniquement à la partie débuggage.</p><h2 id="Installation-configuration-et-utilisation-basique-de-XDEBUG"><a href="#Installation-configuration-et-utilisation-basique-de-XDEBUG" class="headerlink" title="Installation, configuration et utilisation basique de XDEBUG"></a>Installation, configuration et utilisation basique de XDEBUG</h2><p>Pour installer XDEBUG depuis un serveur Debian, rien de très compliqué:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get install php5-xdebug</span><br></pre></td></tr></table></figure></p><h3 id="Communication-avec-le-serveur-ou-se-trouve-l’IDE"><a href="#Communication-avec-le-serveur-ou-se-trouve-l’IDE" class="headerlink" title="Communication avec le serveur ou se trouve l’IDE"></a>Communication avec le serveur ou se trouve l’IDE</h3><p>Si l’application que vous souhaitez débugger n’est pas sur la même machine que votre IDE (ou si votre application est dans une VM ce qui est le plus courant), vous allez devoir configurer le remote host de XDEBUG.</p><ul><li>La méthode la plus simple et qui fonctionne dans la plupart des cas est de mettre le paramètre <code>xdebug.remote_connect_back</code> à <code>On</code> (ou <code>1</code>, ces valeurs étant équivalentes). XDEBUG essaiera simplement de se connecter à l’IP d’ou provient la requête (si un proxy se trouve devant votre application, xdebug checkera les headers <code>HTTP_X_FORWARDED_FOR</code> et <code>REMOTE_ADDR</code>, voir un autre header configuré dans le paramètre <code>xdebug.remote_addr_header</code> si renseigné. On considérera être dans ce cas dans nos exemples.</li><li>Si <code>xdebug.remote_connect_back</code> ne fonctionne pas, vous pouvez spécifier l’IP de la machine ou se trouve votre IDE (ou l’IP de votre machine hôte depuis votre VM) dans le paramètre <code>xdebug.remote_host</code>.</li></ul><p>Vous trouverez des informations plus completes sur le paramètrage de xdebug sur le site officiel: <a href="https://xdebug.org/docs/all_settings" target="_blank" rel="noopener">https://xdebug.org/docs/all_settings</a>.</p><h3 id="Debbugger-les-scripts-CLI-PHP"><a href="#Debbugger-les-scripts-CLI-PHP" class="headerlink" title="Debbugger les scripts CLI PHP"></a>Debbugger les scripts CLI PHP</h3><p>Il y a plusieurs façons de lancer une session de débuggage avec un script CLI PHP.</p><h4 id="Declenchement-a-l’aide-d’une-variable-d’environnement"><a href="#Declenchement-a-l’aide-d’une-variable-d’environnement" class="headerlink" title="Déclenchement à l’aide d’une variable d’environnement"></a>Déclenchement à l’aide d’une variable d’environnement</h4><p>Supposons notre config telle que ci-dessous:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// /etc/php5/cli/conf.d/20-xdebug.ini</span><br><span class="line">zend_extension=/usr/lib/php5/20100525/xdebug.so</span><br><span class="line">xdebug.remote_enable=On</span><br><span class="line">xdebug.remote_connect_back=On</span><br></pre></td></tr></table></figure></p><p>Le mode débuggage peut s’enclencher à l’aide d’une variable d’environnement:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> XDEBUG_CONFIG=<span class="string">"idekey=ma-valeur-quelconque"</span> <span class="comment"># Start debugging session</span></span><br><span class="line">$ php monscript.php</span><br><span class="line">$ <span class="built_in">unset</span> XDEBUG_CONFIG <span class="comment"># stop debugging session</span></span><br></pre></td></tr></table></figure><p>Sur l’IDE PHPSTORM que j’utilise, lorsqu’on lance un script CLI pour le débugger, c’est cette façon de faire qui est utilisée. L’IDE lance le script avec une <code>idekey</code> aléatoire, écoute les informations de débuggage qui arrivent avec cette <code>idekey</code> et dans le cas d’un serveur distant (ou VM) utilise les mappings définis dans l’IDE pour l’interpréteur distant afin de savoir à quels fichiers locaux correspondent les fichiers distants en cours d’exécution.</p><p>Vous pouvez aussi choisir de lancer le script directement sur votre machine distante (ou VM) et vous contenter découter toutes les connections de débuggage entrant dans votre IDE. Sur PHPSTORM par exemple, si l’on procède comme ça il nous manquera les informations de mapping. Il faut donc aussi définir la variable d’environnement <code>PHP_IDE_CONFIG</code> qui va faire référence à un une configuration de serveur que vous avez defini dans PHPSTORM. Ce sont les mappings définis dans cette configuration qui seront utilisés (plus d’infos ici: <a href="https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html#d468732e672)" target="_blank" rel="noopener">https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html#d468732e672)</a>.</p><p>Une des limitation de cette méthode est que si un autre script CLI est lancé pendant votre session de débuggage (par un cron par exemple ou manuellement), il bénéficiera des variables d’environnement définies et sera également lancé en mode débuggage.</p><h4 id="Declenchement-en-modifiant-la-configuration-XDEBUG-a-la-volee"><a href="#Declenchement-en-modifiant-la-configuration-XDEBUG-a-la-volee" class="headerlink" title="Déclenchement en modifiant la configuration XDEBUG à la volée"></a>Déclenchement en modifiant la configuration XDEBUG à la volée</h4><p>Une autre possibilité est d’utiliser le paramètre -d de PHP pour modifier sa configuration uniquement pour le script que l’on lance:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php -dxdebug.remote_enable=1 -dxdebug.remote_connect_back=1 -dxdebug.xdebug.remote_autostart=1 monscript.php</span><br></pre></td></tr></table></figure></p><p>Le débuggage est ici déclenché par <code>xdebug.xdebug.remote_autostart</code>. Mettre cette directive dans votre fichier xdebug.ini serait bien trop coûteux car tous les scripts seraient lancés en mode débuggage; mais il peut être intéressant de l’utiliser uniquement pour le script que l’on souhaite débugger. Vous pouvez aussi bien sûr mettre <code>xdebug.remote_enable</code> et <code>xdebug.remote_connect_back</code> dans votre fichier xdebug.ini et simplement affecter <code>xdebug.remote_autostart</code> à la volée (via le paramètre php -d).</p><h4 id="Desactivation-Activation-complete-de-XDEBUG"><a href="#Desactivation-Activation-complete-de-XDEBUG" class="headerlink" title="Désactivation/Activation complète de XDEBUG"></a>Désactivation/Activation complète de XDEBUG</h4><p>Selon la puissance de votre serveur ou VM, il arrive parfois que de laisser XDEBUG activé soit trop coûteux. Même si aucune session de débuggage n’est déclenchée, la présence de XDEBUG provoque malgré tout une grosse baisse des performances. Vous pouvez donc choisir de n’activer XDEBUG que lorsque vous voulez utiliser le débugger:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// /etc/php5/cli/conf.d/20-xdebug.ini</span><br><span class="line">zend_extension=/usr/lib/php5/20100525/xdebug.so</span><br><span class="line">xdebug.remote_enable=On</span><br><span class="line">xdebug.remote_connect_back=On</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo php5enmod xdebug</span><br><span class="line">$ php -dxdebug.xdebug.remote_autostart=1 monscript.php</span><br><span class="line">$ sudo php5dismod xdebug</span><br></pre></td></tr></table></figure><p>Vous pouvez bien sûr aussi choisir de mettre le paramètre <code>xdebug.xdebug.remote_autostart</code> dans le fichier de configuration xdebug.ini. ça vous évitera de toujours devoir rajouter ce paramètre à la volée mais il faut garder à l’esprit que tout autre script CLI lancé pendant que XDEBUG est activé sera automatiquement en mode débuggage.</p><h3 id="Debbugger-un-site-web-en-PHP"><a href="#Debbugger-un-site-web-en-PHP" class="headerlink" title="Debbugger un site web en PHP"></a>Debbugger un site web en PHP</h3><p>Pour débugger un site web, le principe reste le même. Vous pouvez bien sûr utiliser <code>xdebug.xdebug.remote_autostart</code> mais déclencher systématiquement une session de debuggage étant rarement le but recherché, on préférera utiliser le cookie <code>XDEBUG_SESSION</code>. Vous pouvez affecter la valeur que vous souhaitez à ce cookie, le principe est le même qu’avec <code>idekey</code>, sa présence déclenche une session de débuggage. Et de la même façon, si vous lancez votre page en débuggage depuis votre IDE, votre IDE écoutera les connexions entrantes avec le cookie <code>XDEBUG_SESSION</code> ayant la même valeur que celle qu’il aura passé au lancement de la page. Si vous ne lancez pas votre page depuis votre IDE, un cookie peut facilement être ajouté avec les outils “développeur” de votre navigateur. Vous pouvez aussi passer à l’url le paramètre <code>XDEBUG_SESSION_START</code> qui provoquera la création du cookie <code>XDEBUG_SESSION</code>:</p><p><code>http://www.monsite.com?XDEBUG_SESSION_START=ma-valeur-quelconque</code></p><h3 id="Aller-plus-loin"><a href="#Aller-plus-loin" class="headerlink" title="Aller plus loin"></a>Aller plus loin</h3><p>Arrivé ici, nous savons débugger un script CLI et un site web. Mais quid si l’on souhaite débugger une API ? Le principe reste le même !</p><h4 id="API-REST"><a href="#API-REST" class="headerlink" title="API REST"></a>API REST</h4><p>Si vous utilisez un outil tel que Postman (par exemple) pour exécuter vos requêtes REST, il vous suffit simplement de rajouter le paramètre <code>XDEBUG_SESSION_START</code> à vos urls comme vu précédemment.</p><p>Si l’appel à votre API est effectuée au milieu du code de votre application, il vous suffit d’envoyer un cookie <code>XDEBUG_SESSION</code>; par exemple avec le client http Guzzle:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$client = <span class="keyword">new</span> \GuzzleHttp\Client();</span><br><span class="line">$cookieJar = GuzzleHttp\Cookie\CookieJar::fromArray([</span><br><span class="line">  <span class="string">'XDEBUG_SESSION'</span> =&gt; <span class="string">'ma-valeur-quelconque'</span></span><br><span class="line">], <span class="string">'monapi.com'</span>);</span><br><span class="line">$res = $client-&gt;request(<span class="string">'GET'</span>, <span class="string">'http://monapi.com/maressource.php'</span>, $cookieJar);</span><br></pre></td></tr></table></figure><h4 id="API-SOAP"><a href="#API-SOAP" class="headerlink" title="API SOAP"></a>API SOAP</h4><p>Si vous utilisez un outil comme SoapUI, il faut ajouter le paramètre <code>XDEBUG_SESSION_START</code> à l’url de votre fichier wsdl.</p><p>Si l’appel à votre API est effectuée au milieu du code de votre application, même fonctionnement que pour une API REST, on ajoute le cookie <code>XDEBUG_SESSION</code> dans le code:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$client = <span class="keyword">new</span> \SoapClient(<span class="string">'http://www.monapi.com);</span></span><br><span class="line"><span class="string">$client-&gt;__setCookie('</span>XDEBUG_SESSION<span class="string">', '</span>ma-valeur-quelconque<span class="string">');</span></span><br><span class="line"><span class="string">$client-&gt;mamethode($monparam);</span></span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Voilà ! j’espère que ce petit tour d’horizon vous aura permis de mieux appréhender le fonctionnement de XDEBUG :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Intéressons nous au debugging d’applications. Tout développeur en fait continuellement dans ses projects. Souvent de la façon la plus basique qui soit:&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $myVar; &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Mais lorsque l’on a besoin de suivre l’execution dans une pile de plusieurs fonctions et à l’intérieur de chacune d’elle visualiser plusieurs variables pour connaitre le contexte, la méthode ci-dessus ne suffit plus. C’est là qu’intervient XDEBUG.&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://keepitsimple.l-vo.fr/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>YAML et in_array, mauvaise surprise</title>
    <link href="http://keepitsimple.l-vo.fr/2018/03/18/yaml-in_array/"/>
    <id>http://keepitsimple.l-vo.fr/2018/03/18/yaml-in_array/</id>
    <published>2018-03-18T20:40:13.000Z</published>
    <updated>2018-04-28T20:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Je vais ici vous conter une petite mésaventure qui m’est arrivée sur une des applications de la société où je travaille. Nous avons un Yaml de configuration qui indique quels clients doivent passer par une action donnée. Le fichier a cette forme:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">targetedCustomers:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">auchan</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">leclerc</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">geant</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cora</span></span><br></pre></td></tr></table></figure></p><p>Ensuite, rien d’extraordinaire, on utilise in_array pour tester si le client courant est concerné par l’action proposée:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Some stuff for parsing Yaml before</span></span><br><span class="line"><span class="comment">// $targetedCustomers is worth ['auchan', 'leclerc', 'geant', 'cora'] </span></span><br><span class="line"><span class="keyword">if</span> (in_array($currentCustomer, $targetedCustomers)) &#123;</span><br><span class="line">  <span class="comment">// Execute the action</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Jusque là tout va bien. Mais récemment nous avons ajouté le client “yes”. Drôle de nom pour un client vous allez me dire. Il n’empêche.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">targetedCustomers:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">auchan</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">leclerc</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">geant</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cora</span></span><br><span class="line"><span class="bullet">  -</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>Et tout d’un coup <strong>TOUS</strong> nos clients se sont mis à être elligibles pour l’action précédemment évoquée. Pas glop. Comment en est-on arrivé à ce résultat ?<br><a id="more"></a></p><h2 id="Yaml-et-ses-valeurs-reservees"><a href="#Yaml-et-ses-valeurs-reservees" class="headerlink" title="Yaml et ses valeurs resérvées"></a>Yaml et ses valeurs resérvées</h2><p>En Yaml, certaines valeurs sont automatiquement converties. La chaine de caractères “true” (peu importe la casse) devient le booléan true. De même pour la chaine “on”. Et aussi pour la chaine “yes”. Tiens ça se précise. Donc une fois parsé, notre Yaml devient:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print_r($targetedCustomers);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array(</span></span><br><span class="line"><span class="comment">  [0] =&gt; auchan,</span></span><br><span class="line"><span class="comment">  [1] =&gt; leclerc,</span></span><br><span class="line"><span class="comment">  [2] =&gt; geant,</span></span><br><span class="line"><span class="comment">  [3] =&gt; cora,</span></span><br><span class="line"><span class="comment">  [4] =&gt; 1</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>Le premier reflèxe en voyant ce résultat est simplement de se dire que le client “yes” n’est pas dans le tableau donc ne sera jamais elligible. Sauf que le typage faible de php vient enfoncer le clou.</p><h2 id="Les-joies-du-typage-dynamique-de-PHP"><a href="#Les-joies-du-typage-dynamique-de-PHP" class="headerlink" title="Les joies du typage dynamique de PHP"></a>Les joies du typage dynamique de PHP</h2><p>Une des premières caractéristiques de PHP est son typage dynamique. Une caractéristique qui a toujours fait de PHP un language un peu à part où se côtoient des bidouilleurs parfois même non informaticiens et des professionnels pour qui ce language n’a aucun secret. La fonction in_array accepte un troisième paramètre qui permet de faire la recherche dans un tableau en vérifiant aussi le type. Voyons donc ce qui ce passe si on ne vérifie pas le type (ce qui est le comportement par defaut):<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strict mode</span></span><br><span class="line">$test = [<span class="string">"auchan"</span>, <span class="string">"leclerc"</span>, <span class="keyword">true</span>];</span><br><span class="line"><span class="comment">// in_array("lidl", $test, true) =&gt; false</span></span><br><span class="line"><span class="comment">// in_array("auchan", $test, true) =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// non strict mode (default behavior)</span></span><br><span class="line"><span class="comment">// in_array("lidl", $test) =&gt; true</span></span><br><span class="line">$test2 = [<span class="string">"auchan"</span>, <span class="string">"leclerc"</span>];</span><br><span class="line"><span class="comment">// in_array(true, $test2) =&gt; true</span></span><br></pre></td></tr></table></figure></p><p>Lorsque l’on n’est pas en mode strict, la conversion est à double sens. Si une valeur du tableau convertie dans le type de la valeur à rechercher correspond, on retourne true (ce qui est prévisible). Ce à quoi on s’attend moins, c’est que si la valeur à rechercher convertie dans le type d’une des valeur du tableau correspond à cette valeur, on retourne true aussi. A garder à l’esprit pour éviter ce genre de mésaventure…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Je vais ici vous conter une petite mésaventure qui m’est arrivée sur une des applications de la société où je travaille. Nous avons un Yaml de configuration qui indique quels clients doivent passer par une action donnée. Le fichier a cette forme:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;targetedCustomers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;auchan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;leclerc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;geant&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cora&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Ensuite, rien d’extraordinaire, on utilise in_array pour tester si le client courant est concerné par l’action proposée:&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Some stuff for parsing Yaml before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// $targetedCustomers is worth [&#39;auchan&#39;, &#39;leclerc&#39;, &#39;geant&#39;, &#39;cora&#39;] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (in_array($currentCustomer, $targetedCustomers)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Execute the action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Jusque là tout va bien. Mais récemment nous avons ajouté le client “yes”. Drôle de nom pour un client vous allez me dire. Il n’empêche.&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;targetedCustomers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;auchan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;leclerc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;geant&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;cora&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Et tout d’un coup &lt;strong&gt;TOUS&lt;/strong&gt; nos clients se sont mis à être elligibles pour l’action précédemment évoquée. Pas glop. Comment en est-on arrivé à ce résultat ?&lt;br&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://keepitsimple.l-vo.fr/tags/PHP/"/>
    
  </entry>
  
</feed>
